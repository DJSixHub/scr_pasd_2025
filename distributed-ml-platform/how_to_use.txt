DISTRIBUTED ML PLATFORM - API USAGE GUIDE
===========================================

This guide shows how to use the distributed ML platform API via PowerShell terminal commands.

PREREQUISITES:
- Containers must be running: docker-compose up -d
- API server available at: http://localhost:8000

===========================================
BASIC COMMANDS
===========================================

1. CHECK API HEALTH
-------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/health' -Method GET"

Expected output: {"status": "healthy", "models_loaded": 6, "model_names": [...]}


2. LIST ALL AVAILABLE MODELS
-----------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/models' -Method GET"

Expected output: {"models": ["RandomForest_ds1", "LogisticRegression_ds1", ...]}


===========================================
METRICS COMMANDS
===========================================

3. GET METRICS FOR SPECIFIC MODEL
----------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-metrics/RandomForest_ds1' -Method GET"

Expected output: 
{
    "model": "RandomForest_ds1",
    "metrics": {
        "accuracy": 1.0,
        "precision": 1.0,
        "recall": 1.0,
        "f1": 1.0,
        "training_time": 0.059
    }
}

4. GET METRICS FOR ALL MODELS
------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/all-metrics' -Method GET"

Expected output: {"all_metrics": {"model1": {...}, "model2": {...}}}


===========================================
PREDICTION COMMANDS
===========================================

5. MAKE PREDICTION WITH IRIS DATA (CLASSIFICATION)
---------------------------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/predict/RandomForest_ds1' -Method POST -Body '{\"features\": [{\"sepal length (cm)\": 5.1, \"sepal width (cm)\": 3.5, \"petal length (cm)\": 1.4, \"petal width (cm)\": 0.2}]}' -ContentType 'application/json'"

Expected output:
{
    "model": "RandomForest_ds1",
    "predictions": [0],
    "latency_ms": 15.2
}

6. MAKE PREDICTION WITH WINE DATA (CLASSIFICATION)
---------------------------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/predict/LogisticRegression_ds2' -Method POST -Body '{\"features\": [{\"alcohol\": 13.2, \"malic_acid\": 2.3, \"ash\": 2.4, \"alcalinity_of_ash\": 18.5, \"magnesium\": 108.0, \"total_phenols\": 2.9, \"flavanoids\": 3.1, \"nonflavanoid_phenols\": 0.3, \"proanthocyanins\": 2.0, \"color_intensity\": 5.6, \"hue\": 1.15, \"od280/od315_of_diluted_wines\": 2.8, \"proline\": 1320.0}]}' -ContentType 'application/json'"

Expected output:
{
    "model": "LogisticRegression_ds2",
    "predictions": [1],
    "latency_ms": 12.8
}


===========================================
VISUALIZATION COMMANDS (JSON DATA)
===========================================

7. GET ROC CURVE DATA FOR SPECIFIC MODEL
-----------------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-plots/RandomForest_ds1' -Method GET"

Expected output: JSON with roc_curve, learning_curve, model_name, and metrics


8. GET ALL VISUALIZATION DATA
------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/all-plots' -Method GET"

Expected output: {"all_plots": {"model1": {...}, "model2": {...}}}


===========================================
PNG EXPORT COMMANDS
===========================================

9. GET ROC CURVE AS PNG (BASE64)
---------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-roc-png/RandomForest_ds1' -Method GET"

Expected output:
{
    "model_name": "RandomForest_ds1",
    "roc_curve_png": "iVBORw0KGgoAAAANSUhEUgAA...",
    "format": "png",
    "encoding": "base64"
}

10. GET LEARNING CURVE AS PNG (BASE64)
---------------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-learning-curve-png/GradientBoosting_ds1' -Method GET"

Expected output:
{
    "model_name": "GradientBoosting_ds1",
    "learning_curve_png": "iVBORw0KGgoAAAANSUhEUgAA...",
    "format": "png",
    "encoding": "base64"
}

11. GET BOTH ROC AND LEARNING CURVES AS PNG
--------------------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-plots-png/LogisticRegression_ds1' -Method GET"

Expected output:
{
    "roc_curve": {"model_name": "...", "roc_curve_png": "..."},
    "learning_curve": {"model_name": "...", "learning_curve_png": "..."},
    "model_name": "LogisticRegression_ds1"
}

12. GET ALL MODELS' PNG DATA
-----------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/all-plots-png' -Method GET"

Expected output: {"all_plots_png": {"model1": {...}, "model2": {...}}}


===========================================
SYSTEM STATUS COMMANDS
===========================================

13. GET API PERFORMANCE METRICS
--------------------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/metrics' -Method GET"

Expected output:
{
    "request_counts": {"RandomForest_ds1": 5, "LogisticRegression_ds1": 3},
    "average_latency_ms": {"RandomForest_ds1": 15.2, "LogisticRegression_ds1": 12.8}
}


===========================================
FORMAT OUTPUT FOR BETTER READABILITY
===========================================

14. FORMAT JSON OUTPUT
-----------------------
powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-metrics/RandomForest_ds1' -Method GET | ConvertTo-Json -Depth 10"

This formats the JSON output with proper indentation for easier reading.


===========================================
COMMON TROUBLESHOOTING
===========================================

ERROR: "Connection refused"
SOLUTION: Make sure containers are running with: docker-compose up -d

ERROR: "Model not found"
SOLUTION: Check available models first with the list models command (#2)

ERROR: "Invalid request format"
SOLUTION: Make sure JSON is properly formatted and use single quotes around the entire command

ERROR: "PowerShell syntax error"
SOLUTION: Use the exact commands shown above - they are tested and work correctly

===========================================
QUICK REFERENCE - MOST USED COMMANDS
===========================================

List models:     powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/models' -Method GET"
Get metrics:     powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-metrics/MODEL_NAME' -Method GET"
Make prediction: powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/predict/MODEL_NAME' -Method POST -Body 'JSON_DATA' -ContentType 'application/json'"
Get ROC PNG:     powershell -Command "Invoke-RestMethod -Uri 'http://localhost:8000/model-roc-png/MODEL_NAME' -Method GET"

Replace MODEL_NAME with actual model names like: RandomForest_ds1, LogisticRegression_ds1, GradientBoosting_ds1, etc.
