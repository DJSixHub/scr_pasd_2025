================================================================================
                        GUÍA RÁPIDA DE USO - PLATAFORMA ML DISTRIBUIDA
================================================================================

INICIAR SISTEMA
===============
docker-compose up -d

DETENER SISTEMA
===============
docker-compose down

REINICIAR SISTEMA
=================
docker-compose restart

docker-compose up --build -d  # reconstruir todo

REINICIAR TODO DESDE CERO (descarga requirements y reconstruye imagen)
=====================================================================
docker-compose down

docker-compose build --no-cache  # fuerza descarga de requirements y dependencias

docker-compose up -d

REINICIAR Y RECONSTRUIR (sin descargar requirements de cero)
===========================================================
docker-compose down

docker-compose build  # usa cache local para requirements si no han cambiado

docker-compose up -d

MONITOREO Y ESTADO
==================
docker exec distributed-ml-platform-ray-head-1 ray status
http://localhost:8265  # Dashboard web

GESTIÓN DE WORKERS
==================
docker-compose stop ray-worker-1
# ...igual para otros workers

docker-compose start ray-worker-1
# ...igual para otros workers

docker-compose restart ray-worker-1 ray-worker-2

docker exec distributed-ml-platform-ray-head-1 ray list nodes

docker-compose logs -f api-server  # logs en tiempo real

docker exec distributed-ml-platform-ray-head-1 ray list actors  # ver actores

ENDPOINTS PRINCIPALES (API)
===========================
GET  /health                # Estado del sistema
GET  /datasets              # Listar datasets
GET  /models                # Listar modelos
POST /predict/{model_name}  # Predicción con modelo
POST /predict/all/{dataset} # Predicción con todos los modelos de un dataset
GET  /metrics/{model_name}  # Métricas de un modelo
GET  /visualization/{model_name}/roc  # Imagen ROC

EJEMPLOS DE USO (PowerShell)
============================
Invoke-RestMethod -Uri 'http://localhost:8000/health'
Invoke-RestMethod -Uri 'http://localhost:8000/models'
Invoke-RestMethod -Uri 'http://localhost:8000/predict/RandomForest_iris' -Method POST -Body '{"features": [{"sepal length (cm)": 5.1, "sepal width (cm)": 3.5, "petal length (cm)": 1.4, "petal width (cm)": 0.2}]}' -ContentType 'application/json'
Invoke-RestMethod -Uri 'http://localhost:8000/metrics/RandomForest_iris'

FORMATO DE PREDICCIÓN
=====================
{
  "features": [
    {"nombre_columna1": valor1, "nombre_columna2": valor2, ...}
  ]
}

EJEMPLO IRIS:
{"features": [{"sepal length (cm)": 5.1, "sepal width (cm)": 3.5, "petal length (cm)": 1.4, "petal width (cm)": 0.2}]}

EJEMPLO WINE:
{"features": [{"alcohol": 13.2, "malic_acid": 2.3, ...}]}

EJEMPLO BREAST_CANCER:
{"features": [{"mean radius": 17.99, ... (30 características) ...}]}

NOTAS IMPORTANTES
=================
- Los nombres de las columnas deben coincidir exactamente con los del CSV.
- Si falta una característica, la predicción fallará.
- Para ver las columnas exactas, revisa el CSV en /app/data/ o usa /docs.
- La curva ROC de SVM solo se genera si el modelo fue entrenado con probability=True.

TROUBLESHOOTING
===============
- Si la API no responde: docker-compose logs api-server
- Si no hay modelos: docker-compose logs trainer
- Si el cluster Ray no está healthy: docker-compose logs ray-head
- Para reiniciar solo el entrenamiento: docker-compose restart trainer
================================================================================