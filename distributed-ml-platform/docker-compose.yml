services:
  # Ray head node (handles both training and serving)
  ray-head:
    build: .
    ports:
      - "8000:8000"  # API port
      - "8265:8265"  # Ray dashboard
      - "10001:10001"  # Ray client server
      - "6379:6379"  # Redis
    command: >
      bash -c "ray start --head --port=6379 --dashboard-host=0.0.0.0 --dashboard-port=8265 --block &
              sleep 5 &&
              python main.py --mode=all --data data/iris.csv --data data/wine.csv --data data/breast_cancer.csv --data data/digits.csv --target=target --output-dir=/app/output --host=0.0.0.0 --port=8000 --ray-redundancy=2 --failure-tolerant &&
              echo 'Keeping container alive to serve API requests...' &&
              tail -f /dev/null"
    volumes:
      - ./output:/app/output
      - ./data:/app/data
      - ray_data:/tmp/ray_data  # Shared data for Ray
    environment:
      - RAY_DISABLE_DOCKER_CPU_WARNING=1
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "ray", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Ray worker nodes for distributed processing
  ray-worker-1:
    build: .
    depends_on:
      - ray-head
    command: >
      bash -c "sleep 10 && ray start --address=ray-head:6379 --block"
    volumes:
      - ./data:/app/data:ro  # Read-only data access
      - ray_data:/tmp/ray_data  # Shared data for Ray
    environment:
      - RAY_DISABLE_DOCKER_CPU_WARNING=1
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  ray-worker-2:
    build: .
    depends_on:
      - ray-head
    command: >
      bash -c "sleep 12 && ray start --address=ray-head:6379 --block"
    volumes:
      - ./data:/app/data:ro  # Read-only data access
      - ray_data:/tmp/ray_data  # Shared data for Ray
    environment:
      - RAY_DISABLE_DOCKER_CPU_WARNING=1
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Data redundancy service
  data-sync:
    build: .
    depends_on:
      - ray-head
    command: >
      bash -c "
      mkdir -p /app/data_backup && 
      while true; do 
        cp -r /app/data/* /app/data_backup/ &&
        cp -r /app/output/* /app/output_backup/ &&
        echo 'Data sync completed' &&
        sleep 300; 
      done"
    volumes:
      - ./data:/app/data:ro
      - ./data_backup:/app/data_backup
      - ./output:/app/output:ro
      - ./output_backup:/app/output_backup
    deploy:
      restart_policy:
        condition: any

volumes:
  ray_data:  # Shared volume for Ray data
